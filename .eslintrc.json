{
  // プログラムの実行環境をESLintに教える。
  // その環境で使用可能なグローバル変数などがプリセットされている。
  "env": {
    "browser": true,
    "es2021": true
  },

  // 既存の設定を流用する。後述のプラグイン、ルール、パーサの設定値などが全て継承される。
  // ESLint パッケージに標準で含まれているものか、別途インストールしたプラグインや共有設定パッケージのものが指定できる。
  // ここに記述した共有設定間でルール設定が重複している場合、リストの後ろに記述されたほうの値で上書きされる”
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime",
    "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "standard-with-typescript",
    "plugin:jsx-a11y/recommended"
  ],

  // 特定のファイルにのみ任意のルールを適用する
  "overrides": [
    {
      "files": ["*.tsx"],
      "rules": {
        // コンポーネントの props に型チェックを行うための propTypes プロパティ40の定義を強制するルール。
        // eslint-config-airbnb で設定されているが、TypeScript の場合は不要なのでファイル拡張子が .tsx の場合に無効化するよう設定を上書き。
        "react/prop-types": "off"
      }
    }
  ],

  "parser": "@typescript-eslint/parser",

  // パーサの各種実行オプションを設定する
  "parserOptions": {
    "ecmaVersion": "latest",
    "tsconfigRootDir": ".",
    "project": ["./tsconfig.json"],
    "sourceType": "module"
  },

  // 任意の（パッケージとしてインストール済みの）プラグインを有効化する
  "plugins": ["react", "react-hooks", "jsx-a11y", "@typescript-eslint"],

  // 適用する個々のルールと、エラーレベルや例外などその設定値を記述する
  "rules": {
    // 任意の構文の間に区切りの空行を入れるかどうかを定義するルール
    // ここでは return分の前に常に空白を入れるよう設定している。
    "padding-line-between-statement": [
      "erorr",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    // オブジェクトの型定義にインターフェースまたは型エイリアスのどちらかを強制するルール
    // ここでは eslint-config-standard-with-typescript がインターフェースを強制しているのを無効化。
    "@typescript-eslint/consistent-type-definitions": "off",
    // 関数の戻り値に必ず型定義を書かなければいけないルール。
    // eslint-config-standard-with-typescript が全面採用しているが厳しすぎるため、その適用がエクスポートされる関数に限られる @typescript-eslintexplicit-module-boundary-types30 に入れ替えた。
    "@typescript-eslint/explicit-function-return-type": "off",
    //
    "@typescript-eslint/explicit-module-boundary-types": ["error"],
    // Promise の誤用を防ぐためのルールで。何も返さない async 関数のコールに明示的に void キーワードをつけることを強制され、コンポーネントのイベント属性に async 関数を渡す際に (e) => { void handleSubmmit(e) } のような煩雑な記述をしいられてしまうため、部分的に無効にした。
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],
    // 使用していない変数の定義を許さないルール。
    // ここでは変数及び、引数の名前の頭を_にした時のみ許容するように設定
    "@typescript-eslint/no-ununsed-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    // トリプルスラッシュ・ディレクティブの使用を許可するかどうかを定義するルール。
    // ここでは eslint-config-standard-with-typescript が一律禁止にしていたのを、type 属性の場合に限り許可するように設定。
    "@typescript-eslint/triple-slash-reference": [
      "error",
      {
        "types": "always"
      }
    ],

    // インポートの際のファイル拡張子を記述するかを定義するルール。
    // ここでは npm パッケージ以外のファイルについて .js、.jsx、.ts、.tsx のファイルのみ拡張子を省略し、他のファイルは拡張子を記述させるように設定。
    "import/extensions": [
      "error",
      {
        "ignorePackages": true,
        "pattern": {
          "js": "never",
          "jsx": "never",
          "ts": "never",
          "tsx": "never"
        }
      }
    ],

    // モジュールインポートの順番をカスタマイズできるルール。
    // ここでは react および react-dom モジュールを最初に、非相対パスで記述した内部モジュールのコンポーネントを相対パスモジュールの直前に、
    // CSS Modules37 ファイルのインポートを最後になるよう設定。
    // なお import from 'xxx' 形式の記述は eslint-plugin-import が認識してくれないため、通常の CSS ファイルのインポート文はソート不可。
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "object",
          "index"
        ],
        "pathGroups": [
          {
            "pattern": "{react,react-dom/**}",
            "group": "builtin",
            "position": "before"
          },
          {
            "pattern": "{[A-Z]*,**/[A-Z]*}",
            "group": "internal",
            "position": "after"
          },
          {
            "pattern": "./**.module.css",
            "group": "index",
            "position": "after"
          }
        ],
        "pathGroupsExcludedImportTypes": ["builtin"],
        "alphabetize": {
          "order": "asc"
        }
      }
    ],

    // displayName コンポーネントのプロパティで、デバッグメッセージでコンポーネントを明示するのに使用される。
    // これがなくてもほとんどの場合はコンポーネントを特定できるため無効化。
    "react/display-name": "off"
  },

  // 各プラグインの追加の設定を記述する
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
